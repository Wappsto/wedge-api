syntax = "proto3";

// import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/Wappsto/wedge-api/go/wedgepb";

package wedge;

// The  Wedge service definition.
service Wedge {
  rpc SetModel (SetModelRequest) returns (Replay) {}
  rpc SetDevice (SetDeviceRequest) returns (Replay) {}
  rpc SetValue (SetValueRequest) returns (Replay) {}
  rpc SetState (SetStateRequest) returns (Replay) {}
}

enum StateType {
    Report = 0;
    Control = 1;
}

message State {
    uint32 id  = 1;
    string data = 2;
    StateType type = 3;
    google.protobuf.Timestamp timestamp = 4;
    string status = 5;
}

enum NumberMapping {
    off = 0;
    on = 1;
}

message Number {
    float min = 1;   // required
    float max = 2;   // required
    float step = 3;  // required
    string unit = 4;  
    string si_conversion = 5;
    bool ordered_mapping = 6;
    bool meaningful_zero = 7;
    NumberMapping mapping = 8;
}

message String {
    float max = 1;
    string encoding = 2;
}

message Blob {
    float max = 1;
    string encoding = 2;
}

message Info {
    bool enabled = 1;
}

enum ValueStatus {
    ok = 0;
    update = 1;
    pending = 2;
}

message Value {
    uint32 id = 1;
    string name = 2;
    string type = 3;
    string period = 4;
    string delta = 5;
    string permission = 6;
    string description = 7;
    ValueStatus status = 8;
    oneof valuetype {
        Number number = 9;
        String string = 10;
        Blob blob = 11;
    }   
    repeated State state = 12;
    Info info = 13;
}

message Device {
    uint32 id = 1;
    string name = 2;
    string manufacturer = 3;
    string product = 4;
    string version = 5;
    string serial = 6;
    string description= 7;
    string protocol = 8;
    string communication= 9;
    uint32 control_timeout = 10;
    bool control_when_offline = 11;
    repeated Value value = 12;
    Info info = 13;
}

message Me {
    string host = 2;
    uint32 port = 3;
}

message Model {
    Me me = 1;
    repeated Device device = 2;
}

// Create/Update all node data model
message SetModelRequest {
    Model model = 1;
}

message SetDeviceRequest {
    Me me = 1;
    Device device = 2;
}

message SetValueRequest {
    Me me = 1;
    uint32 device_id = 2;
    Value value = 3;
}

message SetStateRequest {
    Me me = 1;
    uint32 device_id = 2;
    uint32 value_id = 3;
    State state = 4;
}

message Replay {
    bool ok = 1;
}
